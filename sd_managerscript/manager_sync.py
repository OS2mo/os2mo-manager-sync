# SPDX-FileCopyrightText: 2022 Magenta ApS <https://magenta.dk>
# SPDX-License-Identifier: MPL-2.0

from uuid import UUID
from zoneinfo import ZoneInfo

import structlog

from .autogenerated_graphql_client.leder_org_units import (
    LederOrgUnitsOrgUnitsObjectsValidities,
)
from .depends import GraphQLClient
from .filters import compute_expected_managers
from .filters import reconcile_org_unit_associations
from .mo import get_leder_org_units

DEFAULT_TZ = ZoneInfo("Europe/Copenhagen")
logger = structlog.get_logger()


async def reconcile_leder_managers(mo: GraphQLClient):
    """
    Main entrypoint: reconciles all _leder managers.
    - Fetch all _leder org units with associations.
    - Filter to only valid managers based on active engagement in parent (handles led-adm).
    - Determine which managers need creation or termination.
    """
    # Step 1: Fetch and parse _leder units
    leder_units = await get_leder_org_units(mo)
    logger.info(f"Fetched {len(leder_units)} _leder units")

    # Step 2: Reconcile each unit and collect redundant associations
    associations_to_terminate: list[UUID] = []
    reconciled_units: list[LederOrgUnitsOrgUnitsObjectsValidities] = []

    for ou in leder_units:
        reconciled, assoc_to_terminate = await reconcile_org_unit_associations(mo, ou)
        reconciled_units.append(reconciled)
        associations_to_terminate.extend(assoc_to_terminate)

    # Step 3: Build the sets of managers that should exist
    managers_should_exist = await compute_expected_managers(reconciled_units)

    # Step 4: Fetch all current managers globally
    current_managers_data = await mo.current_managers()
    current_managers = {
        (
            manager.current.org_unit_uuid,
            manager.current.employee_uuid,
        ): manager.current.uuid
        for manager in current_managers_data.objects
        if manager.current
    }

    # Step 5: Compute managers to create and terminate
    to_create = managers_should_exist - set(current_managers.keys())
    to_terminate: list[tuple[tuple[UUID, UUID | None], UUID]] = [
        (key, manager_uuid)
        for key, manager_uuid in current_managers.items()
        if key not in managers_should_exist
    ]

    logger.info(f"Managers to create: {to_create}")
    logger.info(f"Managers to terminate: {to_terminate}")

    # managers_to_create = await build_manager_mutation(mo, to_create)

    # Step 6: Apply changes
    # for manager in to_create:
    #     await mo.create_manager(org_emp)

    # for key, manager_uuid in to_terminate:
    #     await terminate_manager_for_employee(manager_uuid)  # implement this

    return {"to_create": to_create, "to_terminate": to_terminate}
