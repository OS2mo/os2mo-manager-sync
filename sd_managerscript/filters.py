# SPDX-FileCopyrightText: 2022 Magenta ApS <https://magenta.dk>
# SPDX-License-Identifier: MPL-2.0
import asyncio
from datetime import datetime
from uuid import UUID

import structlog
from more_itertools import one

from .autogenerated_graphql_client.client import GraphQLClient
from .autogenerated_graphql_client.leder_org_units import (
    LederOrgUnitsOrgUnitsObjectsValidities,
)
from .autogenerated_graphql_client.leder_org_units import (
    LederOrgUnitsOrgUnitsObjectsValiditiesAssociations,
)
from .exceptions import ConflictingManagers

logger = structlog.get_logger()


async def reconcile_org_unit_associations(
    mo: GraphQLClient, org_unit: LederOrgUnitsOrgUnitsObjectsValidities
) -> tuple[LederOrgUnitsOrgUnitsObjectsValidities, list[UUID]]:
    """
    Filter associations for a _leder unit.

    Returns:
        - org_unit with only the latest valid association
        - list of association UUIDs to terminate
    """
    associations = org_unit.associations
    if not associations:
        return org_unit, []

    # Determine latest valid association
    latest_assoc = await pick_latest_valid_association(mo, org_unit)

    if not latest_assoc:
        # Nothing valid → all associations are redundant
        to_terminate = [assoc.uuid for assoc in associations]
        org_unit.associations = []
        return org_unit, to_terminate

    # Keep only the latest, mark others for termination
    to_terminate = [assoc.uuid for assoc in associations if assoc != latest_assoc]
    org_unit.associations = [latest_assoc]
    return org_unit, to_terminate


async def compute_expected_managers(
    filtered_units: list[LederOrgUnitsOrgUnitsObjectsValidities],
) -> set[tuple[UUID, UUID | None]]:
    """
    Compute the set of managers that should exist based on already-filtered associations.
    Applies led-adm logic.
    """
    managers_should_exist = set()

    for ou in filtered_units:
        if not ou.associations or not ou.parent:
            continue

        keep = one(ou.associations)  # already filtered
        parent = ou.parent

        # Always add parent
        managers_should_exist.add((parent.uuid, keep.employee_uuid))

        # led-adm → also add grandparent
        if parent.name.lower().endswith("led-adm") and parent.parent_uuid:
            managers_should_exist.add((parent.parent_uuid, keep.employee_uuid))

    return managers_should_exist


async def pick_latest_valid_association(
    mo: GraphQLClient, org_unit: LederOrgUnitsOrgUnitsObjectsValidities
) -> LederOrgUnitsOrgUnitsObjectsValiditiesAssociations | None:
    """
    From all associations in a _leder unit, pick the employee with the latest active engagement in the parent org unit.
    Terminates redundant associations if necessary.
    Returns the association to keep, or None if none are valid.
    """
    if not org_unit.associations or not org_unit.parent:
        return None

    parent_uuid = org_unit.parent.uuid
    associations = org_unit.associations

    # Fetch latest engagement dates for all associations
    engagement_dates = await asyncio.gather(
        *[
            get_latest_parent_engagement_from(mo, assoc.employee_uuid, parent_uuid)
            for assoc in associations
            if assoc.employee_uuid
        ]
    )

    # Pair associations with their engagement date
    valid_pairs = [
        (assoc, dt)
        for assoc, dt in zip(associations, engagement_dates)
        if dt is not None
    ]

    if not valid_pairs:
        return None

    # Find the latest engagement date
    latest_date = max(dt for _, dt in valid_pairs)
    # TODO: Rename
    winners = [assoc for assoc, dt in valid_pairs if dt == latest_date]

    if len(winners) > 1:
        raise ConflictingManagers(
            f"Multiple employees share latest engagement date in _leder {org_unit.uuid}"
        )

    return one(winners)


async def get_latest_parent_engagement_from(
    mo: GraphQLClient, employee_uuid: UUID, parent_uuid: UUID
) -> datetime | None:
    """
    Return the latest engagement 'from' date for the employee in the given parent org unit.

    Args:
        gql_client: GraphQL client
        employee_uuid: UUID of the employee
        parent_uuid: UUID of the parent org unit to filter engagements

    Returns:
        datetime of latest engagement 'from' in parent org unit, or None if no valid engagement
    """
    # TODO: Giver det mening at hente alle engagementer ud for enheden?
    data = await mo.engagements(employee_uuid)

    latest: datetime | None = None

    for eng in data.objects:
        for val in eng.validities:
            if val.org_unit_uuid != parent_uuid:
                continue
            from_date = val.validity.from_
            if from_date:
                if latest is None or from_date > latest:
                    latest = from_date
    return latest
