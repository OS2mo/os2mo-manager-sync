# SPDX-FileCopyrightText: 2022 Magenta ApS <https://magenta.dk>
# SPDX-License-Identifier: MPL-2.0
from collections.abc import AsyncGenerator
from contextlib import asynccontextmanager
from contextlib import AsyncExitStack
from typing import Any
from uuid import UUID

import structlog
from fastapi import APIRouter
from fastramqpi.main import FastRAMQPI
from starlette.status import HTTP_202_OK

from .autogenerated_graphql_client import GraphQLClient
from .config import get_settings
from .config import ManagerSyncSettings
from .holstebro_managers import update_mo_managers  # type: ignore
from .log import setup_logging

logger = structlog.get_logger()


def construct_context() -> dict[str, Any]:
    """Construct request context."""
    return {}


def create_fastramqpi() -> FastRAMQPI:
    """
    Initiate a FastRAMQPI instance.
    """

    logger.info("Import settings")
    settings = ManagerSyncSettings()

    logger.info("FastRAMQPI setup")
    fastramqpi = FastRAMQPI(
        application_name=settings.application_name,
        settings=settings.fastramqpi,
        graphql_version=24,
        graphql_client_cls=GraphQLClient,
    )
    fastramqpi.add_context(settings=settings)

    fastapi_router = APIRouter()

    @fastapi_router.post("/trigger/single/{ou_uuid}")
    async def update_single_org_unit(ou_uuid: UUID, dry_run: bool = False) -> None:
        logger.info("Updating org unit", uuid=ou_uuid)
        gql_client = context["gql_client"]
        root_uuid = context["root_uuid"]
        await update_mo_managers(
            gql_client=gql_client,
            org_unit_uuid=ou_uuid,
            root_uuid=root_uuid,
            recursive=False,
            dry_run=dry_run,
        )

    @fastapi_router.post("/trigger/all", status_code=HTTP_202_OK)
    async def run_update() -> None:
        """Starts update process of managers"""
        gql_client = context["gql_client"]
        root_uuid = context["root_uuid"]
        await update_mo_managers(
            gql_client=gql_client, org_unit_uuid=root_uuid, root_uuid=root_uuid
        )

    return app
