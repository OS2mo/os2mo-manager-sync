# SPDX-FileCopyrightText: 2022 Magenta ApS <https://magenta.dk>
# SPDX-License-Identifier: MPL-2.0
from typing import Any

import structlog
from fastapi import APIRouter
from fastapi import FastAPI
from fastramqpi.main import FastRAMQPI
from starlette.status import HTTP_202_ACCEPTED

from . import depends
from .autogenerated_graphql_client import GraphQLClient
from .config import ManagerSyncSettings
from .manager_sync import reconcile_leder_managers

logger = structlog.get_logger()


def construct_context() -> dict[str, Any]:
    """Construct request context."""
    return {}


def create_fastramqpi() -> FastRAMQPI:
    """
    Initiate a FastRAMQPI instance.
    """

    logger.info("Import settings")
    settings = ManagerSyncSettings()

    logger.info("FastRAMQPI setup")
    fastramqpi = FastRAMQPI(
        application_name="os2mo-manager-sync",
        settings=settings.fastramqpi,
        graphql_client_cls=GraphQLClient,
        graphql_version=25,
    )
    fastramqpi.add_context(settings=settings)

    fastapi_router = APIRouter()

    # @fastapi_router.post("/trigger/single/{ou_uuid}")
    # async def update_single_org_unit(ou_uuid: UUID, dry_run: bool = False) -> None:
    #     logger.info("Updating org unit", uuid=ou_uuid)
    #     gql_client = context["gql_client"]
    #     root_uuid = context["root_uuid"]
    #     await update_mo_managers(
    #         gql_client=gql_client,
    #         org_unit_uuid=ou_uuid,
    #         root_uuid=root_uuid,
    #         recursive=False,
    #         dry_run=dry_run,
    #     )

    @fastapi_router.post("/trigger/all", status_code=HTTP_202_ACCEPTED)
    async def run_update(gql_client: depends.GraphQLClient) -> None:
        """Starts update process of managers"""
        await reconcile_leder_managers(mo=gql_client)

    app = fastramqpi.get_app()
    app.include_router(fastapi_router)

    return fastramqpi


def create_app() -> FastAPI:
    fastramqpi = create_fastramqpi()
    return fastramqpi.get_app()
