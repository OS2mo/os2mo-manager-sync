# SPDX-FileCopyrightText: 2022 Magenta ApS <https://magenta.dk>
# SPDX-License-Identifier: MPL-2.0

from uuid import UUID

import structlog
from more_itertools import one

from .autogenerated_graphql_client.client import GraphQLClient
from .autogenerated_graphql_client.input_types import ManagerCreateInput
from .autogenerated_graphql_client.input_types import RAValidityInput
from .autogenerated_graphql_client.leder_org_units import (
    LederOrgUnitsOrgUnitsObjectsValidities,
)
from .config import get_settings

logger = structlog.get_logger()


async def get_leder_org_units(
    mo: GraphQLClient,
) -> list[LederOrgUnitsOrgUnitsObjectsValidities]:
    """
    Fetch all _leder org units with associations and convert them into OrgUnitManagers models.
    """

    data = await mo.leder_org_units()
    leder_units: list[LederOrgUnitsOrgUnitsObjectsValidities] = []

    for ou in data.objects:
        for validity in ou.validities:
            if (
                validity.associations
                and validity.name.lower().strip().endswith("_leder")
                and not validity.name.lower().strip().startswith("ø_")
            ):
                leder_units.append(validity)

    return leder_units


async def get_manager_level(mo: GraphQLClient, org_unit_uuid: UUID) -> UUID:
    """
    Determines the appropriate manager level for an org unit.

    Rules:
      - Normally, use the unit's org_unit_level_uuid
      - Special case: if unit name ends with "led-adm",
        use the parent's org_unit_level_uuid

    Returns:
        UUID of correct manager_level
    """
    data = await mo.org_unit_level(org_unit_uuid)
    org_unit = one(one(data.objects).validities)
    org_unit_level = org_unit.org_unit_level_uuid

    # Special case for led-adm unit
    if org_unit.name.strip().lower().endswith("led-adm"):
        if not org_unit.parent:
            raise ValueError(f"Led-adm unit {org_unit.uuid} has no parent")
        org_unit_level = org_unit.parent.org_unit_level_uuid

    if not org_unit_level:
        raise ValueError(f"Org unit {org_unit.uuid} has no org_unit_level")

    # Map org_unit_level_uuid → manager_level_uuid
    manager_level_mapping = get_settings().manager_level_mapping
    if org_unit_level not in manager_level_mapping:
        raise KeyError(f"No manager_level mapping for org_unit_level {org_unit_level}")

    return manager_level_mapping[org_unit_level]


async def build_manager_mutation(
    mo: GraphQLClient,
    to_create: set[tuple[UUID, UUID | None]],
) -> list[ManagerCreateInput]:
    return [
        ManagerCreateInput(
            person=employee_uuid,
            responsibility=[get_settings().responsibility_uuid],
            org_unit=org_unit_uuid,
            manager_level=await get_manager_level(mo, org_unit_uuid),
            # FIX: This is not completely done / or should have an update maybe?
            manager_type=get_settings().manager_type_uuid,
            validity=RAValidityInput(from_=date.today(), to=None),
        )
        for org_unit_uuid, employee_uuid in to_create
    ]
